module.exports = {
  env: {
    browser: true,
  },
  overrides: [
    {
      files: ['*.ts'],
      parserOptions: {
        project: ['tsconfig.json'],
        createDefaultProgram: true,
      },
      plugins: ['rxjs', 'import', 'sonarjs', '@tapsellorg', 'unused-imports'],
      extends: ['plugin:sonarjs/recommended', 'plugin:@angular-eslint/recommended', 'prettier'],
      rules: {
        'no-cond-assign': 'warn',
        'no-constant-condition': 'warn',
        'no-control-regex': 'warn',
        'no-debugger': 'warn',
        'no-dupe-args': 'warn',
        'no-dupe-keys': 'warn',
        'no-duplicate-case': 'warn',
        'no-empty-character-class': 'warn',
        'no-empty': 'warn',
        'no-ex-assign': 'warn',
        'no-extra-boolean-cast': 'warn',
        'no-extra-semi': 'warn',
        'no-func-assign': 'warn',
        'no-inner-declarations': 'warn',
        'no-invalid-regexp': 'warn',
        'no-irregular-whitespace': 'warn',
        'no-negated-in-lhs': 'warn',
        'no-obj-calls': 'warn',
        'no-regex-spaces': 'warn',
        'no-sparse-arrays': 'off',
        'no-unreachable': 'warn',
        'use-isnan': 'warn',
        'valid-typeof': 'warn',
        'no-fallthrough': 'warn',
        'no-octal': 'warn',
        'no-redeclare': 'warn',
        'no-delete-var': 'warn',
        'no-undef': 'off',
        'no-mixed-spaces-and-tabs': 'warn',
        'rxjs/no-async-subscribe': 'error',
        'rxjs/no-ignored-observable': 'error',
        'rxjs/no-ignored-subscription': 'off',
        'rxjs/no-nested-subscribe': 'off',
        'rxjs/no-unbound-methods': 'error',
        'import/prefer-default-export': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/unbound-method': 'off',
        'lines-between-class-members': 'off',
        'no-useless-constructor': 'off',
        'no-empty-function': 'off',
        'class-methods-use-this': 'off',
        '@typescript-eslint/no-misused-promises': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-empty-function': 'off',
        '@typescript-eslint/no-use-before-define': 'off',
        'rxjs/throw-error': 'off',
        'prefer-const': 'warn',
        '@typescript-eslint/no-empty-interface': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/no-floating-promises': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-namespace': 'off',
        '@typescript-eslint/lines-between-class-members': 'off',
        '@typescript-eslint/member-ordering': 'warn',
        '@angular-eslint/no-output-rename': 'off',
        // From here, rules are checked and we're almost sure they're good rules
        'no-console': ['warn', { allow: ['error', 'warn'] }],
        quotes: 'off',
        eqeqeq: ['warn', 'smart'],
        'no-param-reassign': 'off',
        camelcase: 'off',
        'no-underscore-dangle': 'off',
        '@typescript-eslint/naming-convention': [
          'warn',
          {
            selector: 'default',
            format: ['camelCase'],
          },
          {
            selector: 'variable',
            format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
            leadingUnderscore: 'allow',
          },
          {
            selector: 'parameter',
            format: ['camelCase'],
            leadingUnderscore: 'allow',
          },
          {
            selector: 'memberLike',
            format: ['camelCase', 'UPPER_CASE'],
            leadingUnderscore: 'allow',
          },
          {
            selector: 'typeLike',
            format: ['PascalCase'],
          },
        ],
        '@angular-eslint/no-input-rename': 'off',
        '@typescript-eslint/no-useless-constructor': 'off',
        'prefer-destructuring': ['warn', { object: true, array: false }],
        'no-restricted-imports': [
          'error',
          {
            paths: [
              {
                name: 'rxjs/Rx',
                message: "Please import directly from 'rxjs' instead",
              },
            ],
            patterns: ['../../*'],
          },
        ],
        'no-plusplus': 'off',
        '@typescript-eslint/no-inferrable-types': 'off',
        '@tapsellorg/injected-service-name': 'warn',
        '@angular-eslint/no-empty-lifecycle-method': 'off',
        'sonarjs/no-duplicate-string': 'warn',
        'arrow-body-style': 'warn',
        'sonarjs/no-identical-functions': 'warn',
        'max-len': 'off',
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': 'off',
        'unused-imports/no-unused-imports': 'error',
        'unused-imports/no-unused-vars': [
          'warn',
          { vars: 'all', varsIgnorePattern: '^_', args: 'after-used', argsIgnorePattern: '^_' },
        ],
      },
    },
    {
      files: ['*.html'],
      extends: ['plugin:@angular-eslint/template/recommended'],
      rules: {},
    },
  ],
};
